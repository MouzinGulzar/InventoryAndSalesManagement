doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        meta(http-equiv='X-UA-Compatible' content='IE=edge')
        meta(name='viewport' content='width=device-width, initial-scale=1.0')
        title #{title}
        link(rel='stylesheet' href='/styles/style.css' media="all")
        //- Fontawesome
        link(rel='stylesheet' href='https://kit.fontawesome.com/3d15514f5b.css' crossorigin='anonymous')
        //- Ionicons
        script(type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js")
        script(nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js")
        //- Bootstrap
        script(src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous")
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js" integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+" crossorigin="anonymous")
        link(href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous")
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous")
        //- jQuery
        script(src="https://code.jquery.com/jquery-3.6.0.min.js") 
        //- Toastr
        link(href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js")

        //- PLOTLY
        script(src="https://cdn.plot.ly/plotly-2.27.0.min.js" charset="utf-8") 

        script.
            function queryString(params, overrides = {}) {
                const mergedParams = { ...params, ...overrides };
                return Object.keys(mergedParams)
                    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(mergedParams[key])}`)
                    .join('&');
            }

        //- Styles block
        block styles
    body
        //- Navbar block
        include ./adminNav.pug

        block content

        block scripts
        script.
            // Set global options
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": true,
                "progressBar": true,
                "positionClass": "toast-bottom-right",
                "preventDuplicates": true,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }

            const params = new URLSearchParams(window.location.search);
            if (params.has('message')) {
                const message = JSON.parse(decodeURIComponent(params.get('message')));
                toastr[message.type](message.text);
            }

            document.addEventListener('DOMContentLoaded', function() {
                const searchForms = document.querySelectorAll('.search-form');

                searchForms?.forEach(form => {
                    form.addEventListener('submit', function(event) {
                        event.preventDefault(); // Prevent the form from submitting normally
                        
                        // Get the current URL and its search parameters
                        const url = new URL(window.location);
                        const searchParams = new URLSearchParams(url.search);
                        
                        // Get the user's search query
                        const searchQuery = form.querySelector('input[type="text"][name="q"]').value;
                        
                        // Update the "q" parameter with the new search query
                        searchParams.set('q', searchQuery);
                        
                        // Redirect the user to the updated URL
                        window.location.href = `${form.getAttribute("data-action")}?${searchParams.toString()}`;
                    });
                }) 
            });
        
            document.querySelectorAll('.options')?.forEach(el => {
                el.addEventListener('change', function() {
                    var selectedValue = this.value;

                    if (selectedValue.startsWith("form")) {
                    // Form submission case
                    document.getElementById(selectedValue).submit();
                    } else if (selectedValue.startsWith("url:")) {
                    // URL navigation case
                    window.location.href = selectedValue.substring(4); // Removes the "url:" part and navigates
                    }
                });
            }) 

            document.querySelectorAll('.confirm-first')?.forEach(e => {
                e.addEventListener('click', () => {
                    if(confirm("Are you sure you want to delete this product? This action can't be undone!")) {
                        window.location.assign(e.getAttribute('data-url'));
                    } else {
                        return false
                    }
                })
            })